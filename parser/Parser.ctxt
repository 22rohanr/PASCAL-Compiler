#BlueJ class context
comment0.target=Parser
comment0.text=\r\n\ The\ Parser\ analyzes\ the\ tokens\ from\ the\ Scanner\ and\ ensures\ \r\n\ that\ it\ forms\ logical\ syntax\ according\ to\ certain\ grammars\r\n\ @author\ Rohan\ Rashingkar\r\n\ @version\ 10/29/21\r\n
comment1.params=sc
comment1.target=Parser(scanner.Scanner)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Parser\r\n\ @param\ sc\ a\ scanner\ that\ will\ be\ used\ with\ this\ parser\r\n
comment2.params=args
comment2.target=void\ main(java.lang.String[])
comment2.text=\r\n\ Method\:\ main\r\n\ Usage\:\ tests\ the\ parser\r\n\ @param\ args\ a\ rudimentary\ array\ of\ strings\r\n\ @throw\ IOException\ an\ exception\ from\ reading\ or\ outputting\ the\ file\r\n\ @throw\ ScanErrorException\ an\ exception\ from\ scanning\r\n
comment3.params=expected
comment3.target=void\ eat(java.lang.String)
comment3.text=\r\n\ Method\:\ eat\r\n\ Usage\:\ Moves\ on\ to\ the\ next\ token\ if\ it\ matches\ an\ expected\ input\r\n\ @param\ expected\ the\ expected\ current\ token\r\n
comment4.params=
comment4.target=ast.Number\ parseNumber()
comment4.text=\r\n\ Method\:\ parseNumber\r\n\ Usage\:\ Parses\ the\ current\ integer\ token\r\n\ precondition\:\ current\ token\ is\ an\ integer\r\n\ postcondition\:\ number\ token\ has\ been\ eaten\r\n\ @return\ the\ value\ of\ the\ parsed\ integer\r\n
comment5.params=
comment5.target=ast.Statement\ parseStatement()
comment5.text=\r\n\ Method\:\ parseStatement\r\n\ Usage\:\ Parses\ the\ current\ statement\ tokens\r\n\ precondition\:\ current\ token\ is\ the\ beginning\ of\ a\ statement\r\n\ postcondition\:\ statement\ tokens\ have\ been\ eaten\ and\ printed\r\n
comment6.params=
comment6.target=ast.Expression\ parseFactor()
comment6.text=\r\n\ Method\:\ parseFactor\r\n\ Usage\:\ Parses\ the\ current\ factor,\ a\ mini\ integer\ expression\ \r\n\ with\ (,),\ or\ -\r\n\ @return\ the\ value\ of\ the\ parsed\ factor\r\n
comment7.params=
comment7.target=ast.Expression\ parseTerm()
comment7.text=\r\n\ Method\:\ parseTerm\r\n\ Usage\:\ Parses\ the\ current\ term,\ a\ mini\ expression\ with\ \r\n\ integers\ and\ *\ or\ /\r\n\ @return\ the\ value\ of\ the\ parsed\ term\r\n
comment8.params=
comment8.target=ast.Expression\ parseExpression()
comment8.text=\r\n\ Method\:\ parseExpression\r\n\ Usage\:\ Parses\ the\ current\ expression\r\n\ @return\ the\ value\ of\ the\ parsed\ expression\r\n
comment9.params=
comment9.target=ast.Program\ parseProgram()
comment9.text=\r\n\ Method\:\ parseProgram\r\n\ Usage\:\ Parses\ the\ current\ program\ with\ its\ procedure\ \r\n\ declarations,\ parameters,\ and\ statements\r\n\ @return\ the\ program\ with\ its\ procedures\ and\ correct\ name\r\n
numComments=10
